import java.io.*;
import java.net.*;
import java.util.*;
import java.text.*;
import java.io.File;
import java.io.FileOutputStream;


public class HTTPServer 
{
    public static void main(String args[]) throws Exception 
    {
	int port = Integer.parseInt(args[0]);
	ServerSocket serverSock=new ServerSocket(port);
	

	while(true) 
	    {
		Socket conn = serverSock.accept();
		Scanner scanin = new Scanner(conn.getInputStream());
		String line=null;
		int nlines=0;
		String arl [] =new String[32]; //declaring string arrayfor lines sent by browser (9.1)

		while (true) 
		    {
			line = scanin.nextLine();
			if(line.length()==0) break;
		       	arl[nlines] = line;               //put line information into the arraylist created above (9.2)
			nlines = nlines + 1;
			
		    }

			for(int cnt = 0; cnt <= nlines; cnt++)
			    {
				System.out.println(arl[cnt]); //Print out each line of the array list arl which stored browser lines (9.3)
			    }
	
		String reqline = arl[0];                                         //create new string from array list arl            (9.4)
		Scanner scan = new Scanner (reqline);                //create new scanner to scan String reqline  (9.4)
		String command = scan.next();                           //scan reqline                                             (9.4)
		String resource = "www" + scan.next();              //scan reqline                                             (9.4)

		String filename = resource;                               //set filename as resource line (10.1)
		File chkfile = new File(filename);        //create file from string filename                       (10.2)
		if(!chkfile.exists())                             //if file doesnt exist print out does not exist       (10.2)
		    {
			System.out.println("File does not exist");
		    }
		else
		    {
			String sizestr = "Bytes in file: " + chkfile.length();  //if file does exist put the file size in bytes into a string (10.2)
			System.out.println(sizestr);                                 //print out the string above                                  (10.2)
		    }

		String resourceName = resource.substring(3);
		OutputStream outs = conn.getOutputStream();
		Date date = new Date();
		SimpleDateFormat ft = new SimpleDateFormat ("EEE, d MMM yyyy H:m:s z");
		String theDate = ft.format(date);



		/*
		 *File path and extension
		 */
		String getExt = chkfile.getName();    //gets files name
		int fcheck = getExt.lastIndexOf(".");  //gets extension substring count
	       	fcheck = fcheck + 1;                        //remove the . from the substring count
		String extension = "plain";
		String checkexte = getExt.substring(fcheck);   //load the extesion into string
		String dir = "text/";
		if(checkexte.equals("html") || checkexte.equals("htm") ||  checkexte.equals("jpg") || checkexte.equals("jpeg"))
		    {
			extension = checkexte;
		    }
		if(extension.equals("jpg") || extension.equals("jpeg"))
		    {
			dir = "image/";
		    }



		/*
		 *Request Reponses****************************
		 */
		 String resno = "";
		if(!resourceName.startsWith("/"))
		    {
			String badreply = "HTTP/1.0 400 Bad request\r\n" +
			    "Connection: close\r\n" +
			    "Content-Type: " + dir + extension + "\r\n" +
			    "Date: " + theDate + "\r\n" +
			    "Allow: GET,HEAD\r\n" + "\r\n";
			outs.write(badreply.getBytes());
			resno = " 400";
		    }
		else if(command.equals("PUT") || command.equals("DELETE") || command.equals("TRACE"))
			    {
				String notallowedreply = "HTTP/1.0 405 Method Not Allowed\r\n" +
				    "Connection: close\r\n" +
				    "Content-Type: " + dir + extension + "\r\n" + 
				    "Date: " + theDate + "\r\n" + "\r\n";
				outs.write(notallowedreply.getBytes());
				resno = " 405";
			    }
		else  if(!chkfile.exists())                                              //only send 404 reply if file does not exist (10.3)
		    {
			String reply="HTTP/1.0 404 Not Found\r\n" +
			    "Connection: close\r\n" +
			    "Content-Type: " + dir + extension + "\r\n"  +
			    "Date: " + theDate + "\r\n"+ "\r\n" +
			    "<h1>Sorry, work in progress</h1>\r\n";
			outs.write(reply.getBytes());                        //send the 404 reply (10.3)
			resno = " 404";

		    }
		else if (command.equals("GET") || command.equals("HEAD"))
		    {
			String correply = "HTTP/1.0 200 OK\r\n" +                //Correct 200 reply (10.5)
			    "Connection: close \r\n" +
			    "Content-Length: " + chkfile.length() + "\r\n" +
			    "Content-Type: " + dir + extension + "\r\n" +
			    "Date: " + theDate + "\r\n" + "\r\n";
				outs.write(correply.getBytes());
				resno = " 200";
			}
			else if(!command.equals("GET") || !command.equals("HEAD")) 
		    {
			String notimpreply = "HTTP/1.0 501 Not Implemented\r\n" + 
			    "Connection: close\r\n" +
			    "Content-Type: " + dir + extension + "\r\n" +
			    "Date : " + theDate + "\r\n" + "\r\n";
			outs.write(notimpreply.getBytes());
			resno = " 501";
		    }

			if(chkfile.isDirectory())
			{
				File indexf = new File(chkfile + "/index.html" );
				File indexfi = new File (chkfile + "/index.htm");
				if(indexf.isFile())
				{
					InputStream fins = new FileInputStream(indexf);   			  
					byte buf[]=new byte[1024];                                        //create a 1mb buffer                        (10.4)
					while (true)      
					{
						int rc = fins.read(buf, 0, 1024);                          //read the inputstream file                  (10.4)
						if(rc<=0) break;                                                //break if the next line is nothing        (10.4)
						outs.write(buf,0,rc);                                          //write out the file                              (10.4)
					}
				}
				else if(indexfi.isFile())
				{
					InputStream fins = new FileInputStream(indexfi);   			  
					byte buf[]=new byte[1024];                                        //create a 1mb buffer                        (10.4)
					while (true)      
					{
						int rc = fins.read(buf, 0, 1024);                          //read the inputstream file                  (10.4)
						if(rc<=0) break;                                                //break if the next line is nothing        (10.4)
						outs.write(buf,0,rc);                                          //write out the file                              (10.4)
					}
 				}
		    }
			else if(chkfile.isFile())
			{
			InputStream fins = new FileInputStream(chkfile);   			  
			byte buf[]=new byte[1024];                                        //create a 1mb buffer                        (10.4)
			while (true)      
			    {
				int rc = fins.read(buf, 0, 1024);                          //read the inputstream file                  (10.4)
				if(rc<=0) break;                                                //break if the next line is nothing        (10.4)
				outs.write(buf,0,rc);                                          //write out the file                              (10.4)
			    }
			}
		    
		
		
		/*
		 *Log File ************************************************8
		 */
		File logout = new File("log.txt");                                                     //creating text file
		FileOutputStream writelog = new FileOutputStream (logout, true);     //creating outputstream to text file
		PrintStream pout = new PrintStream(writelog);
		pout.println(conn.getInetAddress() + "  " +  command + "  " + ft.format(date) + "  " +  resourceName + resno);
		if(!logout.exists())                                                                          //checking if file already exists. if not then create it
		    {
			logout.createNewFile();
		    }
		
		conn.close();
	    }
    }
}
